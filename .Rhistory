training_cor
high_cor
high_cor <- findCorrelation(training_cor, 0.90)
high_cor
training_cor <- cor(training)
high_cor <- findCorrelation(training_cor, 0.90)
training_cor[is.na(training_cor)] <- 0.0
high_cor <- findCorrelation(training_cor, 0.90)
training <- training[, -high_cor]
testing <- testing[, -high_cor]
length(high_cor)
length(high_cor)
dim(training)
myControl <- trainControl(number = 200)
mySVM <- train(training, training_class,
method = 'svmRadial',
tuneLength = 5,
trControl = myControl,
scaled = FALSE)
mySVM
myControl <- trainControl(number = 10)
mySVM <- train(training, training_class,
method = 'svmRadial',
tuneLength = 5,
trControl = myControl,
scaled = FALSE)
mySVM
gbmGrid <- expand.grid(.interaction.depth = (1:5) * 2,
.n.trees = (1:10) * 25,
.shrinkage = 0.1)
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5,
tuneGrid = gbmGrid)
gbmGrid <- expand.grid(interaction.depth = (1:5) * 2,
n.trees = (1:10) * 25,
shrinkage = 0.1)
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5,
tuneGrid = gbmGrid)
gbmGrid
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5
#tuneGrid = gbmGrid
)
myGBM$finalModel
gbmGrid <- expand.grid(.interaction.depth = (1:5) * 2,
.n.trees = (1:10) * 25,
.shrinkage = 0.1)
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5,
tuneGrid = gbmGrid
)
gbmGrid <- expand.grid(n.trees = (1:10) * 25,
interaction.depth = (1:5) * 2,
shrinkage = .1)
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5,
tuneGrid = gbmGrid
)
gbmGrid <- expand.grid(n.trees = (1:10) * 25,
interaction.depth = (1:5) * 2,
shrinkage = .1,
n.minobsinnode = 10)
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5,
tuneGrid = gbmGrid
)
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5
)
plot(myGBM)
plot(myGBM, metric = 'Kappa')
plot(myGBM)
plot(myGBM, metric = 'Kappa')
plot(mySVM)
plot(myGBM, plotType = 'level')
gbmGrid <- expand.grid(n.trees = (1:5) * 50,
interaction.depth = 2:5,
shrinkage = .1,
n.minobsinnode = 10)
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5
)
gbmGrid <- expand.grid(n.trees = (1:5) * 50,
interaction.depth = 2:5,
shrinkage = .1,
n.minobsinnode = 10)
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5,
tuneGrid = gbmGrid
)
plot(myGBM)
plot(myGBM, metric = 'Kappa')
plot(myGBM, plotType = 'level')
predict(myGBM, newdata = testing)[1:10]
extractPrediction(myGBM)
predList <- predict(myList, newdata = testing)
myList <- list(svm = mySVM, gbm = myGBM)
predList <- predict(myList, newdata = testing)
lapply(predList, function(x) x[1:5])
extractPrediction(myList, testing, testing_class)
myPredValues ã€Š- extractPrediction(myList, testing, testing_class)
myPredValues <- extractPrediction(myList, testing, testing_class)
subset(myPredValues, dataType == 'Test')
head(myPredValues)
myTestValues <- subset(myPredValues, dataType == 'Test')
head(myTestValues)
table(myTestValues$model)
plotClassProbs(myTestValues)
myProbValues <- extractProb(myList, testing, testing_class)
myProbValues <- subset(myProbValues, dataType == 'Test')
myList
summary(myList)
myProbValues <- extractProb(myList, testing, testing_class)
myProbValues <- extractPrediction(myList, testing, testing_class)
?extractProb
dim(testing)
dim(testing_class)
length(testing_class)
myProbValues <- extractPrediction(myList, testX = testing)
myProbValues <- extractProb(myList, testX = testing)
myList2 <- list(svm = mySVM)
myProbValues <- extractProb(myList2, testX = testing, testY = testing_class)
myList2 <- list(svm = myGBM)
myProbValues <- extractProb(myList2, testX = testing, testY = testing_class)
myProbValues <- subset(myProbValues, dataType == 'Test')
plotClassProbs(myProbValues)
myProbValues
head(myProbValues)
library(ggplot2)
ggplot(myProbValues, aes(x = mutagen, fill = as.factor(obs))) +
geom_bar(binwidth = 0.1) +
theme(legend.position="bottom") +
scale_fill_discrete(name="mutagen: ") +
ggtitle("Prediction probability")
ggplot(myProbValues, aes(x = mutagen, fill = as.factor(obs))) +
geom_bar(binwidth = 0.1, position = 'fill') +
theme(legend.position="bottom") +
scale_fill_discrete(name="mutagen: ") +
ggtitle("Prediction probability")
ggplot(myProbValues, aes(x = mutagen, fill = as.factor(obs))) +
geom_histogram(binwidth = 0.05, alpha = 0.5, position = 'identity') +
theme(legend.position="bottom") +
scale_fill_discrete(name="mutagen: ") +
ggtitle("Prediction probability")
ggplot(myProbValues, aes(x = mutagen, fill = as.factor(obs))) +
geom_histogram(binwidth = 0.05, alpha = 0.5, position = 'identity') +
geom_density()
theme(legend.position="bottom") +
scale_fill_discrete(name="mutagen: ") +
ggtitle("Prediction probability")
ggplot(myProbValues, aes(x = mutagen, fill = as.factor(obs))) +
# geom_histogram(binwidth = 0.05, alpha = 0.5, position = 'identity') +
geom_density()
theme(legend.position="bottom") +
scale_fill_discrete(name="mutagen: ") +
ggtitle("Prediction probability")
ggplot(myProbValues, aes(x = mutagen, fill = as.factor(obs))) +
# geom_histogram(binwidth = 0.05, alpha = 0.5, position = 'identity') +
geom_density(alpha = 0.3)
theme(legend.position="bottom") +
scale_fill_discrete(name="mutagen: ") +
ggtitle("Prediction probability")
ggplot(myProbValues, aes(x = mutagen, fill = as.factor(obs))) +
geom_histogram(binwidth = 0.05, alpha = 0.5, position = 'identity') +
theme(legend.position="bottom") +
scale_fill_discrete(name="mutagen: ") +
ggtitle("Prediction probability")
ggplot(myProbValues, aes(x = mutagen, fill = as.factor(obs))) +
geom_density(alpha = 0.3) +
ggtitle("Prediction probability")
myGBMpred <- subset(myPredValues, model == 'svm')
myGBMpred <- subset(myPredValues, model == 'gbm')
confusionMatrix(myGBMpred$pred, myGBMpred$obs)
library(caret)
library(ggplot2)
confusionMatrix(myGBMpred$pred, myGBMpred$obs)
myGBMprod <- subset(myProbValues, model == 'gbm')
head(myGBMprob)
myProbValues
head(myProbValues)
myGBMprod <- subset(myProbValues, model == 'gbm')
head(myGBMprob)
myGBMprod
head(myGBMprod)
head(myGBMprob)
myGBMprob <- subset(myProbValues, model == 'gbm')
head(myGBMprob)
roc(myGBMprob$mutagen, myGBMprob$obs)
library(pROC)
roc(myGBMprob$mutagen, myGBMprob$obs)
?roc
library(caret)
roc(myGBMprob$mutagen, myGBMprob$obs)
roc(myGBMprob$mutagen, as.numeric(myGBMprob$obs == 'mutagen'))
library(ROCR)
pred <- prediction(myProbValues$mutagen, myProbValues$obs)
perf <- performance(pred, 'tpr', 'fpr')
plot(perf, col = 'black')
plotObsVsPred(myGBMpred)
plotObsVsPred(myPredValues)
myGBMimp <- varImp(myGBM)
myGBMimp
plot(myGBMimp)
plot(myGBMimp, top = 20)
# clean data
rm(list = ls())
library(ROCR)
library(pROC)
library(readr)
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(caretEnsemble)
set.seed(1708)
# Age bin
dt$agebin <- as.numeric((dt$age > 31) + (dt$age > 6))
# Fare bin
dt$farebin <- as.numeric(dt$fare > 11)
# Sibsp bin
dt$familysize <- as.numeric(dt$sibsp + dt$parch > 3)
# Cabin bin
dt$cabinbin <- as.numeric(dt$cabin %in% c("T", "F") + 2 * as.numeric(dt$cabin %in% c("G", "N") ))
# remove name and ticket column
nokeep <- c('name', 'ticket')
dt <- dt[ , -which(names(dt) %in% nokeep)]
# as numeric
dt <- within(dt, pclass <- as.factor(pclass))
dt <- within(dt, agebin <- as.factor(agebin))
dt <- within(dt, farebin <- as.factor(farebin))
dt <- within(dt, familysize <- as.factor(familysize))
dt <- within(dt, cabinbin <- as.factor(cabinbin))
save(dt, file = 'data/data_cleaned_4.RData')
# split data into training and testing
training = dt[!is.na(dt$survived), ]
testing = dt[is.na(dt$survived), ]
training <- within(training, survived <- factor(as.factor(survived), labels = c('No', 'Yes')))
training <- read_csv("data/train.csv")
testing  <- read_csv("data/test.csv")
testing$Survived <- NaN
dt <- rbind(training, testing)
names(dt) <- tolower(names(dt))
# title
dt$title <- sapply(dt$name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
dt$title <- sub(' ', '', dt$title)
dt$title[dt$title %in% c('Mme', 'Mlle', 'Dona', 'Lady', 'the Countess', 'Jonkheer', 'Miss', 'Ms', 'Mrs')] <- 'Ms'
dt$title[dt$title %in% c('Capt', 'Don', 'Major', 'Sir', 'Dr', 'Col')] <- 'Sir'
dt$title <- factor(dt$title)
# cabin
dt$cabin <- sapply(dt$cabin, FUN=function(x) {strsplit(x, split='')[[1]][1]})
dt$cabin[is.na(dt$cabin)] <- 'N'
# Age and fare NaN
agefit <- rpart(age ~ pclass + sex + sibsp + parch + fare + embarked + title, data = dt[!is.na(dt$age),], method="anova")
farefit <- rpart(fare ~  age + pclass + sex + sibsp + parch + embarked + title, data = dt[!is.na(dt$fare), ], method="anova")
# Replace missing values in AGE and FARE with prediction
dt$age[is.na(dt$age)] <- predict(agefit, dt)[is.na(dt$age)]
dt$fare[is.na(dt$fare)] <- predict(farefit, dt)[is.na(dt$fare)]
# Embarked
dt$embarked[dt$embarked == ""] <- "Q"
dt$embarked <- as.factor(dt$embarked)
save(dt, file = 'data/data_cleaned_3.RData')
# split data into training and testing
training = dt[!is.na(dt$survived), ]
testing = dt[is.na(dt$survived), ]
# Age bin
dt$agebin <- as.numeric((dt$age > 31) + (dt$age > 6))
# Fare bin
dt$farebin <- as.numeric(dt$fare > 11)
# Sibsp bin
dt$familysize <- as.numeric(dt$sibsp + dt$parch > 3)
# Cabin bin
dt$cabinbin <- as.numeric(dt$cabin %in% c("T", "F") + 2 * as.numeric(dt$cabin %in% c("G", "N") ))
# remove name and ticket column
nokeep <- c('name', 'ticket')
dt <- dt[ , -which(names(dt) %in% nokeep)]
# as numeric
dt <- within(dt, pclass <- as.factor(pclass))
dt <- within(dt, agebin <- as.factor(agebin))
dt <- within(dt, farebin <- as.factor(farebin))
dt <- within(dt, familysize <- as.factor(familysize))
dt <- within(dt, cabinbin <- as.factor(cabinbin))
save(dt, file = 'data/data_cleaned_4.RData')
# split data into training and testing
training = dt[!is.na(dt$survived), ]
testing = dt[is.na(dt$survived), ]
training <- within(training, survived <- factor(as.factor(survived), labels = c('No', 'Yes')))
####
# best model RF3
my_RF3 <- train(
survived ~ sex + title + fare + age + pclass + cabinbin + sibsp + farebin + familysize + parch + embarked + agebin,
data = training,
method = 'rf',
importance = T,
ntree = 501,
tuneGrid = my_grid,
trControl = my_control
)
my_RF3_imp <- varImp(my_RF3, scale = TRUE)
plot(my_RF3_imp)
####
# best model RF3
my_control <- trainControl(
method='repeatedcv',
number=5,
repeats=5,
savePredictions=TRUE,
classProbs=TRUE,
index=createResample(training$survived, 25),
summaryFunction=twoClassSummary
)
my_grid <- expand.grid(.mtry = 3)
my_RF3 <- train(
survived ~ sex + title + fare + age + pclass + cabinbin + sibsp + farebin + familysize + parch + embarked + agebin,
data = training,
method = 'rf',
importance = T,
ntree = 501,
tuneGrid = my_grid,
trControl = my_control
)
my_RF3_imp <- varImp(my_RF3, scale = TRUE)
plot(my_RF3_imp)
my_pred <- pred(my_RF3, training, prob)
pred <- function(my_model, dt = testing, prob = 0.5) {
testing_pred <- predict(my_model, newdata = dt, type = 'prob')
testing_pred <- testing_pred[[1]]
testing_pred <- as.numeric(testing_pred > prob)
}
my_pred <- predict(my_RF3, training, prob)
my_pred <- predict(my_RF3, training)
my_pred
my_pred <- predict(my_RF3, training, type = prob)
my_pred <- predict(my_RF3, training, 'prob')
my_pred
head(my_pred)
x
x <- rnorm(10)
y <- rnorm(10)
x
y
cbind(x, y)
head(my_pred)
my_pred <- cbind(training, my_pred)
head(my_pred)
threshold = 0.5
v <- rep(NA, nrow(my_pred))
v <- ifelse(my_pred$Yes >= threshold & my_pred$survived == 1, "TP", v)
v <- ifelse(my_pred$Yes >= threshold & my_pred$survived == 0, "FP", v)
v <- ifelse(my_pred$Yes < threshold & my_pred$survived == 1, "FN", v)
v <- ifelse(my_pred$Yes < threshold & my_pred$survived == 0, "TN", v)
my_pred$pred_type <- v
ggplot(data=my_pred, aes(x=survived, y=Yes)) +
geom_violin(fill=rgb(1,1,1,alpha=0.6), color=NA) +
geom_jitter(aes(color=pred_type), shape=1) +
geom_hline(yintercept=threshold, color="red", alpha=0.6) +
scale_color_discrete(name = "type") +
labs(title=sprintf("Threshold at %.2f", threshold))
is.na(v)
head(my_pred)
v <- rep(NA, nrow(my_pred))
v <- ifelse(my_pred$Yes >= threshold & my_pred$survived == 'Yes', "TP", v)
v <- ifelse(my_pred$Yes >= threshold & my_pred$survived == 'No', "FP", v)
v <- ifelse(my_pred$Yes < threshold & my_pred$survived == 'Yes', "FN", v)
v <- ifelse(my_pred$Yes < threshold & my_pred$survived == 'No', "TN", v)
my_pred$pred_type <- v
is.na(v)
ggplot(data=my_pred, aes(x=survived, y=Yes)) +
geom_violin(fill=rgb(1,1,1,alpha=0.6), color=NA) +
geom_jitter(aes(color=pred_type), shape=1) +
geom_hline(yintercept=threshold, color="red", alpha=0.6) +
scale_color_discrete(name = "type") +
labs(title=sprintf("Threshold at %.2f", threshold))
calculate_roc <- function(df, cost_of_fp, cost_of_fn, n=100) {
tpr <- function(df, threshold) {
sum(df$pred_type == 'TP') / nrows(df)
}
fpr <- function(df, threshold) {
sum(df$pred_type == 'FP') / nrows(df)
}
cost <- function(df, threshold, cost_of_fp, cost_of_fn) {
sum(df$pred_type == 'FP') * cost_of_fp +
sum(df$pred_type == 'FN') * cost_of_fn
}
roc <- data.frame(threshold = seq(0,1,length.out=n), tpr=NA, fpr=NA)
roc$tpr <- sapply(roc$threshold, function(th) tpr(df, th))
roc$fpr <- sapply(roc$threshold, function(th) fpr(df, th))
roc$cost <- sapply(roc$threshold, function(th) cost(df, th, cost_of_fp, cost_of_fn))
return(roc)
}
calculate_roc <- function(df, cost_of_fp = 1, cost_of_fn = 1, n=100) {
tpr <- function(df, threshold) {
sum(df$pred_type == 'TP') / nrows(df)
}
fpr <- function(df, threshold) {
sum(df$pred_type == 'FP') / nrows(df)
}
cost <- function(df, threshold, cost_of_fp, cost_of_fn) {
sum(df$pred_type == 'FP') * cost_of_fp +
sum(df$pred_type == 'FN') * cost_of_fn
}
roc <- data.frame(threshold = seq(0,1,length.out=n), tpr=NA, fpr=NA)
roc$tpr <- sapply(roc$threshold, function(th) tpr(df, th))
roc$fpr <- sapply(roc$threshold, function(th) fpr(df, th))
roc$cost <- sapply(roc$threshold, function(th) cost(df, th, cost_of_fp, cost_of_fn))
return(roc)
}
my_roc <- calculate_roc(my_pred)
nrows(my_pred)
nRows(my_pred)
nrwo(my_pred)
nrow(my_pred)
calculate_roc <- function(df, cost_of_fp = 1, cost_of_fn = 1, n=100) {
tpr <- function(df, threshold) {
sum(df$pred_type == 'TP') / nrow(df)
}
fpr <- function(df, threshold) {
sum(df$pred_type == 'FP') / nrow(df)
}
cost <- function(df, threshold, cost_of_fp, cost_of_fn) {
sum(df$pred_type == 'FP') * cost_of_fp +
sum(df$pred_type == 'FN') * cost_of_fn
}
roc <- data.frame(threshold = seq(0,1,length.out=n), tpr=NA, fpr=NA)
roc$tpr <- sapply(roc$threshold, function(th) tpr(df, th))
roc$fpr <- sapply(roc$threshold, function(th) fpr(df, th))
roc$cost <- sapply(roc$threshold, function(th) cost(df, th, cost_of_fp, cost_of_fn))
return(roc)
}
my_roc <- calculate_roc(my_pred)
my_roc
calculate_roc <- function(df, cost_of_fp = 1, cost_of_fn = 1, n=100) {
tpr <- function(df, threshold) {
sum(df$Yes >= threshold & df$survived == 'Yes') / nrow(df)
}
fpr <- function(df, threshold) {
sum(df$Yes >= threshold & df$survived == 'No') / nrow(df)
}
cost <- function(df, threshold, cost_of_fp, cost_of_fn) {
sum(df$Yes >= threshold & df$survived == 'No') * cost_of_fp +
sum(df$Yes < threshold & df$survived == 'Yes') * cost_of_fn
}
roc <- data.frame(threshold = seq(0,1,length.out=n), tpr=NA, fpr=NA)
roc$tpr <- sapply(roc$threshold, function(th) tpr(df, th))
roc$fpr <- sapply(roc$threshold, function(th) fpr(df, th))
roc$cost <- sapply(roc$threshold, function(th) cost(df, th, cost_of_fp, cost_of_fn))
return(roc)
}
my_roc <- calculate_roc(my_pred)
my_roc
calculate_roc <- function(df, cost_of_fp = 1, cost_of_fn = 1, n=100) {
tpr <- function(df, threshold) {
sum(df$Yes >= threshold & df$survived == 'Yes') / sum(df$survived == 'Yes')
}
fpr <- function(df, threshold) {
sum(df$Yes >= threshold & df$survived == 'No') / sum(df$survived == 'No')
}
cost <- function(df, threshold, cost_of_fp, cost_of_fn) {
sum(df$Yes >= threshold & df$survived == 'No') * cost_of_fp +
sum(df$Yes < threshold & df$survived == 'Yes') * cost_of_fn
}
roc <- data.frame(threshold = seq(0,1,length.out=n), tpr=NA, fpr=NA)
roc$tpr <- sapply(roc$threshold, function(th) tpr(df, th))
roc$fpr <- sapply(roc$threshold, function(th) fpr(df, th))
roc$cost <- sapply(roc$threshold, function(th) cost(df, th, cost_of_fp, cost_of_fn))
return(roc)
}
my_roc <- calculate_roc(my_pred)
head(my_roc)
plot_roc <- function(roc, threshold = 0.5, cost_of_fp = 1, cost_of_fn = 1) {
library(gridExtra)
norm_vec <- function(v) (v - min(v))/diff(range(v))
idx_threshold = which.min(abs(roc$threshold-threshold))
col_ramp <- colorRampPalette(c("green","orange","red","black"))(100)
col_by_cost <- col_ramp[ceiling(norm_vec(roc$cost)*99)+1]
p_roc <- ggplot(roc, aes(fpr,tpr)) +
geom_line(color=rgb(0,0,1,alpha=0.3)) +
geom_point(color=col_by_cost, size=4, alpha=0.5) +
coord_fixed() +
geom_line(aes(threshold,threshold), color=rgb(0,0,1,alpha=0.5)) +
labs(title = sprintf("ROC")) + xlab("FPR") + ylab("TPR") +
geom_hline(yintercept=roc[idx_threshold,"tpr"], alpha=0.5, linetype="dashed") +
geom_vline(xintercept=roc[idx_threshold,"fpr"], alpha=0.5, linetype="dashed")
p_cost <- ggplot(roc, aes(threshold, cost)) +
geom_line(color=rgb(0,0,1,alpha=0.3)) +
geom_point(color=col_by_cost, size=4, alpha=0.5) +
labs(title = sprintf("cost function")) +
geom_vline(xintercept=threshold, alpha=0.5, linetype="dashed")
sub_title <- sprintf("threshold at %.2f - cost of FP = %d, cost of FN = %d", threshold, cost_of_fp, cost_of_fn)
grid.arrange(p_roc, p_cost, ncol=2, sub=textGrob(sub_title, gp=gpar(cex=1), just="bottom"))
}
plot_roc(my_roc)
plot_roc(my_roc, 0.5, 1, 1)
plot_roc(my_roc, 0.5, 1, 2)
