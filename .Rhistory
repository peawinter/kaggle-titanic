tuneLength = 30,
trControl = my_control
)
my_control <- trainControl(
method='repeatedcv',
number=5,
repeats=5,
savePredictions=TRUE,
classProbs=TRUE,
index=createResample(training$survived, 25),
summaryFunction=twoClassSummary
)
my_grid <- expand.grid(.mtry = 3)
my_RF3 <- train(
survived ~ sex + title + fare + age + pclass + cabinbin + sibsp + farebin + familysize + parch + embarked + agebin,
data = training,
method = 'rf',
importance = T,
ntree = 501,
tuneGrid = my_grid,
trControl = my_control
)
my_RF3_imp <- varImp(my_RF3, scale = TRUE)
plot(my_RF3_imp)
my_RPART <- train(
survived ~ sex + title + fare + age + pclass + cabinbin + sibsp + farebin + familysize + parch + embarked + agebin,
data = training,
method = 'rpart',
tuneLength = 30,
trControl = my_control
)
pred <- function(my_model, dt = testing, prob = 0.5) {
testing_pred <- predict(my_model, newdata = dt, type = 'prob')
testing_pred <- testing_pred[[1]]
testing_pred <- as.numeric(testing_pred > prob)
}
submit <- function(testing_pred, name = 'new', dt = testing) {
write.csv(data.frame(PassengerId = testing$passengerid, Survived = as.numeric(testing_pred > 0.5)), file = paste(name, ".csv", sep = ""), row.names = F)
}
pred(my_RPART, training)
my_pred <- pred(my_RPART, training)
my_pred
err <- c()
for (i in -100:100) {
prob = 50 + i / 10
my_rpart_pred <- pred(my_RF3, training, prob)
my_rpart_pred <- factor(as.factor(my_rpart_pred), labels = c('No', 'Yes'))
err <- c(err, sum(my_rpart_pred != training$survived))
}
err
my_rpart_pred
for (i in -100:100) {
prob = 0.5 + 0.001 * i
my_rpart_pred <- pred(my_RF3, training, prob)
my_rpart_pred <- factor(as.factor(my_rpart_pred), labels = c('No', 'Yes'))
err <- c(err, sum(my_rpart_pred != training$survived))
}
err
0.513
my_rf3_pred <- pred(my_RF3, prob = 0.513)
submit(my_RF3, 'my_RF_new')
my_ref3_pred
my_rf3_pred
submit <- function(testing_pred, name = 'new', dt = testing) {
write.csv(data.frame(PassengerId = testing$passengerid, Survived = testing_pred, file = paste(name, ".csv", sep = ""), row.names = F)
}
submit <- function(testing_pred, name = 'new', dt = testing) {
write.csv(data.frame(PassengerId = testing$passengerid, Survived = testing_pred), file = paste(name, ".csv", sep = ""), row.names = F)
}
submit(my_RF3, 'my_RF_new')
my_rf3_pred
as.numeric(my_rf3_pred)
submit <- function(testing_pred, name = 'new', dt = testing) {
write.csv(data.frame(PassengerId = testing$passengerid, Survived = as.numeric(testing_pred)), file = paste(name, ".csv", sep = ""), row.names = F)
}
submit(my_RF3, 'my_RF_new')
data.frame(id = testing$passengerid, sr = my_rf3_pred)
paste('old', '.csv', sep = "")
name = 'old'
paste(name, '.csv', sep = "")
testing_pred <- my_rf3_pred
write.csv(data.frame(PassengerId = testing$passengerid, Survived = as.numeric(testing_pred)),
file = paste(name, ".csv", sep = ""), row.names = F)
submit <- function(testing_pred, name = 'new', dt = testing) {
write.csv(data.frame(PassengerId = testing$passengerid, Survived = as.numeric(testing_pred)),
file = paste(name, ".csv", sep = ""), row.names = F)
}
submit(my_rf3_pred, 'my_RF_new')
library(caret)
data(descr)
rm(list = ls())
library(caret)
load('data/data_cleaned_3.RData')
training <- dt[!is.na(dt$survived), ]
testing <- dt[is.na(dt$survived), ]
set.seed(1708)
inTrain <- createDataPartition(training, p = 0.8, list = F)
inTrain <- createDataPartition(survived, p = 0.8, list = F)
inTrain <- createDataPartition(training$survived, p = 0.8, list = F)
valid <- training[inTrain, ]
train <- training[-inTrain, ]
dim(valid)
dim(train)
head(train)
nokeep <- c("name", "ticket")
rm(list = ls())
library(caret)
set.seed(1708)
# load data
load('data/data_cleaned_3.RData')
nokeep <- c("name", "ticket")
dt <- dt[, -which(names(dt) %in% nokeep)]
training <- dt[!is.na(dt$survived), ]
testing <- dt[is.na(dt$survived), ]
inTrain <- createDataPartition(training$survived, p = 0.8, list = F)
valid <- training[inTrain, ]
train <- training[-inTrain, ]
prop.table(train$survived)
inTrain
dt$survived
training$survived
table(train$survived)
table(valid$survived)
valid <- training[-inTrain, ]
train <- training[inTrain, ]
#
table(train$survived)
table(valid$survived)
train
cor(train)
install.packages("RCurl")
library(RCurl)
URL <- "http://topepo.github.io/caret/descr.RData"
x <- getURL(URL)
URL <- "http:\\topepo.github.io\caret\descr.RData"
dt <- load("http://topepo.github.io/caret/descr.RData")
dt <- load("topepo.github.io/caret/descr.RData")
dt <- load("https://topepo.github.io/caret/descr.RData")
dt <- getURL("https://topepo.github.io/caret/descr.RData")
dt
mutagen <- getURL("http://topepo.github.io/caret/mutagen.RData")
mutagen
dt
dt <- getURL("https://topepo.github.io/caret/descr.RData")
descr <- getURL(URLencode("https://topepo.github.io/caret/descr.RData"))
descr <- getURLContent(URLencode("https://topepo.github.io/caret/descr.RData"))
descr <- getURLContent("https://topepo.github.io/caret/descr.RData")
mutagen <- getURLContent("http://topepo.github.io/caret/mutagen.RData")
data <- read.csv("http://www.cookbook-r.com/Data%20input%20and%20output/Loading%20data%20from%20a%20file/datafile.csv")
data
tmp <- read.csv("http://www.cookbook-r.com/Data%20input%20and%20output/Loading%20data%20from%20a%20file/datafile.csv")
methods(median)
median.default()
median.default
methods(print)
# clean data
rm(list = ls())
library(ROCR)
library(pROC)
library(readr)
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(caretEnsemble)
set.seed(1708)
training <- read_csv("data/train.csv")
testing  <- read_csv("data/test.csv")
testing$Survived <- NaN
dt <- rbind(training, testing)
names(dt) <- tolower(names(dt))
# title
dt$title <- sapply(dt$name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
dt$title <- sub(' ', '', dt$title)
dt$title[dt$title %in% c('Mme', 'Mlle', 'Dona', 'Lady', 'the Countess', 'Jonkheer', 'Miss', 'Ms', 'Mrs')] <- 'Ms'
dt$title[dt$title %in% c('Capt', 'Don', 'Major', 'Sir', 'Dr', 'Col')] <- 'Sir'
dt$title <- factor(dt$title)
# cabin
dt$cabin <- sapply(dt$cabin, FUN=function(x) {strsplit(x, split='')[[1]][1]})
dt$cabin[is.na(dt$cabin)] <- 'N'
# Age and fare NaN
agefit <- rpart(age ~ pclass + sex + sibsp + parch + fare + embarked + title, data = dt[!is.na(dt$age),], method="anova")
farefit <- rpart(fare ~  age + pclass + sex + sibsp + parch + embarked + title, data = dt[!is.na(dt$fare), ], method="anova")
# Replace missing values in AGE and FARE with prediction
dt$age[is.na(dt$age)] <- predict(agefit, dt)[is.na(dt$age)]
dt$fare[is.na(dt$fare)] <- predict(farefit, dt)[is.na(dt$fare)]
# Embarked
dt$embarked[dt$embarked == ""] <- "Q"
dt$embarked <- as.factor(dt$embarked)
save(dt, file = 'data/data_cleaned_3.RData')
# split data into training and testing
training = dt[!is.na(dt$survived), ]
testing = dt[is.na(dt$survived), ]
# Age bin
dt$agebin <- as.numeric((dt$age > 31) + (dt$age > 6))
# Fare bin
dt$farebin <- as.numeric(dt$fare > 11)
# Sibsp bin
dt$familysize <- as.numeric(dt$sibsp + dt$parch > 3)
# Cabin bin
dt$cabinbin <- as.numeric(dt$cabin %in% c("T", "F") + 2 * as.numeric(dt$cabin %in% c("G", "N") ))
# remove name and ticket column
nokeep <- c('name', 'ticket')
dt <- dt[ , -which(names(dt) %in% nokeep)]
# as numeric
dt <- within(dt, pclass <- as.factor(pclass))
dt <- within(dt, agebin <- as.factor(agebin))
dt <- within(dt, farebin <- as.factor(farebin))
dt <- within(dt, familysize <- as.factor(familysize))
dt <- within(dt, cabinbin <- as.factor(cabinbin))
save(dt, file = 'data/data_cleaned_4.RData')
# split data into training and testing
training = dt[!is.na(dt$survived), ]
testing = dt[is.na(dt$survived), ]
training <- within(training, survived <- factor(as.factor(survived), labels = c('No', 'Yes')))
# control part
my_control <- trainControl(
method='repeatedcv',
number=5,
repeats=5,
savePredictions=TRUE,
classProbs=TRUE,
index=createResample(training$survived, 25),
summaryFunction=twoClassSummary
)
my_grid <- expand.grid(.mtry = 3)
my_RF1 <- train(
survived ~ .,
data = training,
method = 'rf',
importance = T,
ntree = 501,
metric = "kappa",
tuneGrid = my_grid,
trControl = my_control
)
my_RF1 <- train(
survived ~ .,
data = training,
method = 'rf',
importance = T,
ntree = 501,
metric = "Kappa",
tuneGrid = my_grid,
trControl = my_control
)
my_RF1
my_RF1 <- train(
survived ~ .,
data = training,
method = 'rf',
importance = T,
ntree = 501,
# metric = "Kappa",
tuneGrid = my_grid,
trControl = my_control
)
rm(list = ls())
install.packages("RCurl")
library(RCurl)
library(caret)
set.seed(1708)
descr <- getURLContent("https://topepo.github.io/caret/descr.RData")
mutagen <- getURLContent("http://topepo.github.io/caret/mutagen.RData")
inTrain <- createDataPartition(mutagen, p = 0.75, list = FALSE)
mutagen
load(mutagen)
load("https://topepo.github.io/caret/descr.RData")
load(url("https://topepo.github.io/caret/descr.RData"))
load(url("http://topepo.github.io/caret/descr.RData"))
rm(list = ls())
load(url("http://topepo.github.io/caret/descr.RData"))
load(url("http://topepo.github.io/caret/mutagen.RData"))
inTrain <- createDataPartition(mutagen, p = 0.75, list = FALSE)
training <- descr[inTrain, ]
testing <- descr[!inTrain, ]
training_class <- mutagen[inTrain]
testing_class <- mutagen[!inTrain]
table(training_class)
table(testing_class)
table(mutagen)
testing <- descr[-inTrain, ]
testing_class <- mutagen[-inTrain]
table(testing_class)
ncol(training)
training_cor <- cor(training)
training_cor
head(training)
high_corr <- findCorrelation(training_cor, 0.90)
training_cor
high_cor
high_cor <- findCorrelation(training_cor, 0.90)
high_cor
training_cor <- cor(training)
high_cor <- findCorrelation(training_cor, 0.90)
training_cor[is.na(training_cor)] <- 0.0
high_cor <- findCorrelation(training_cor, 0.90)
training <- training[, -high_cor]
testing <- testing[, -high_cor]
length(high_cor)
length(high_cor)
dim(training)
myControl <- trainControl(number = 200)
mySVM <- train(training, training_class,
method = 'svmRadial',
tuneLength = 5,
trControl = myControl,
scaled = FALSE)
mySVM
myControl <- trainControl(number = 10)
mySVM <- train(training, training_class,
method = 'svmRadial',
tuneLength = 5,
trControl = myControl,
scaled = FALSE)
mySVM
gbmGrid <- expand.grid(.interaction.depth = (1:5) * 2,
.n.trees = (1:10) * 25,
.shrinkage = 0.1)
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5,
tuneGrid = gbmGrid)
gbmGrid <- expand.grid(interaction.depth = (1:5) * 2,
n.trees = (1:10) * 25,
shrinkage = 0.1)
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5,
tuneGrid = gbmGrid)
gbmGrid
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5
#tuneGrid = gbmGrid
)
myGBM$finalModel
gbmGrid <- expand.grid(.interaction.depth = (1:5) * 2,
.n.trees = (1:10) * 25,
.shrinkage = 0.1)
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5,
tuneGrid = gbmGrid
)
gbmGrid <- expand.grid(n.trees = (1:10) * 25,
interaction.depth = (1:5) * 2,
shrinkage = .1)
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5,
tuneGrid = gbmGrid
)
gbmGrid <- expand.grid(n.trees = (1:10) * 25,
interaction.depth = (1:5) * 2,
shrinkage = .1,
n.minobsinnode = 10)
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5,
tuneGrid = gbmGrid
)
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5
)
plot(myGBM)
plot(myGBM, metric = 'Kappa')
plot(myGBM)
plot(myGBM, metric = 'Kappa')
plot(mySVM)
plot(myGBM, plotType = 'level')
gbmGrid <- expand.grid(n.trees = (1:5) * 50,
interaction.depth = 2:5,
shrinkage = .1,
n.minobsinnode = 10)
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5
)
gbmGrid <- expand.grid(n.trees = (1:5) * 50,
interaction.depth = 2:5,
shrinkage = .1,
n.minobsinnode = 10)
myGBM <- train(training, training_class,
method = 'gbm',
trControl = myControl,
bag.fraction = 0.5,
tuneGrid = gbmGrid
)
plot(myGBM)
plot(myGBM, metric = 'Kappa')
plot(myGBM, plotType = 'level')
predict(myGBM, newdata = testing)[1:10]
extractPrediction(myGBM)
predList <- predict(myList, newdata = testing)
myList <- list(svm = mySVM, gbm = myGBM)
predList <- predict(myList, newdata = testing)
lapply(predList, function(x) x[1:5])
extractPrediction(myList, testing, testing_class)
myPredValues 《- extractPrediction(myList, testing, testing_class)
myPredValues <- extractPrediction(myList, testing, testing_class)
subset(myPredValues, dataType == 'Test')
head(myPredValues)
myTestValues <- subset(myPredValues, dataType == 'Test')
head(myTestValues)
table(myTestValues$model)
plotClassProbs(myTestValues)
myProbValues <- extractProb(myList, testing, testing_class)
myProbValues <- subset(myProbValues, dataType == 'Test')
myList
summary(myList)
myProbValues <- extractProb(myList, testing, testing_class)
myProbValues <- extractPrediction(myList, testing, testing_class)
?extractProb
dim(testing)
dim(testing_class)
length(testing_class)
myProbValues <- extractPrediction(myList, testX = testing)
myProbValues <- extractProb(myList, testX = testing)
myList2 <- list(svm = mySVM)
myProbValues <- extractProb(myList2, testX = testing, testY = testing_class)
myList2 <- list(svm = myGBM)
myProbValues <- extractProb(myList2, testX = testing, testY = testing_class)
myProbValues <- subset(myProbValues, dataType == 'Test')
plotClassProbs(myProbValues)
myProbValues
head(myProbValues)
library(ggplot2)
ggplot(myProbValues, aes(x = mutagen, fill = as.factor(obs))) +
geom_bar(binwidth = 0.1) +
theme(legend.position="bottom") +
scale_fill_discrete(name="mutagen: ") +
ggtitle("Prediction probability")
ggplot(myProbValues, aes(x = mutagen, fill = as.factor(obs))) +
geom_bar(binwidth = 0.1, position = 'fill') +
theme(legend.position="bottom") +
scale_fill_discrete(name="mutagen: ") +
ggtitle("Prediction probability")
ggplot(myProbValues, aes(x = mutagen, fill = as.factor(obs))) +
geom_histogram(binwidth = 0.05, alpha = 0.5, position = 'identity') +
theme(legend.position="bottom") +
scale_fill_discrete(name="mutagen: ") +
ggtitle("Prediction probability")
ggplot(myProbValues, aes(x = mutagen, fill = as.factor(obs))) +
geom_histogram(binwidth = 0.05, alpha = 0.5, position = 'identity') +
geom_density()
theme(legend.position="bottom") +
scale_fill_discrete(name="mutagen: ") +
ggtitle("Prediction probability")
ggplot(myProbValues, aes(x = mutagen, fill = as.factor(obs))) +
# geom_histogram(binwidth = 0.05, alpha = 0.5, position = 'identity') +
geom_density()
theme(legend.position="bottom") +
scale_fill_discrete(name="mutagen: ") +
ggtitle("Prediction probability")
ggplot(myProbValues, aes(x = mutagen, fill = as.factor(obs))) +
# geom_histogram(binwidth = 0.05, alpha = 0.5, position = 'identity') +
geom_density(alpha = 0.3)
theme(legend.position="bottom") +
scale_fill_discrete(name="mutagen: ") +
ggtitle("Prediction probability")
ggplot(myProbValues, aes(x = mutagen, fill = as.factor(obs))) +
geom_histogram(binwidth = 0.05, alpha = 0.5, position = 'identity') +
theme(legend.position="bottom") +
scale_fill_discrete(name="mutagen: ") +
ggtitle("Prediction probability")
ggplot(myProbValues, aes(x = mutagen, fill = as.factor(obs))) +
geom_density(alpha = 0.3) +
ggtitle("Prediction probability")
myGBMpred <- subset(myPredValues, model == 'svm')
myGBMpred <- subset(myPredValues, model == 'gbm')
confusionMatrix(myGBMpred$pred, myGBMpred$obs)
library(caret)
library(ggplot2)
confusionMatrix(myGBMpred$pred, myGBMpred$obs)
myGBMprod <- subset(myProbValues, model == 'gbm')
head(myGBMprob)
myProbValues
head(myProbValues)
myGBMprod <- subset(myProbValues, model == 'gbm')
head(myGBMprob)
myGBMprod
head(myGBMprod)
head(myGBMprob)
myGBMprob <- subset(myProbValues, model == 'gbm')
head(myGBMprob)
roc(myGBMprob$mutagen, myGBMprob$obs)
library(pROC)
roc(myGBMprob$mutagen, myGBMprob$obs)
?roc
library(caret)
roc(myGBMprob$mutagen, myGBMprob$obs)
roc(myGBMprob$mutagen, as.numeric(myGBMprob$obs == 'mutagen'))
library(ROCR)
pred <- prediction(myProbValues$mutagen, myProbValues$obs)
perf <- performance(pred, 'tpr', 'fpr')
plot(perf, col = 'black')
plotObsVsPred(myGBMpred)
plotObsVsPred(myPredValues)
myGBMimp <- varImp(myGBM)
myGBMimp
plot(myGBMimp)
plot(myGBMimp, top = 20)
